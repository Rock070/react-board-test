[{"/Users/rock/.bitnami/stackman/machines/xampp/volumes/root/htdocs/rock/week22-react/my-app/src/index.js":"1","/Users/rock/.bitnami/stackman/machines/xampp/volumes/root/htdocs/rock/week22-react/my-app/src/components/MessageBoard/MessageBoard.js":"2"},{"size":314,"mtime":1606757819292,"results":"3","hashOfConfig":"4"},{"size":4781,"mtime":1606847458792,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15mb2r9",{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/rock/.bitnami/stackman/machines/xampp/volumes/root/htdocs/rock/week22-react/my-app/src/index.js",[],"/Users/rock/.bitnami/stackman/machines/xampp/volumes/root/htdocs/rock/week22-react/my-app/src/components/MessageBoard/MessageBoard.js",["11","12","13","14","15"],"import react, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nconst API_ENDPOINT = `https://student-json-api.lidemy.me/comments?_sort=createdAt&_order=desc`\n\nconst Page = styled.div`\n  width: 400px;\n  margin: 0 auto;\n`\n\nconst Title = styled.h1`\n  color: #333;\n`\n\nconst MessageForm = styled.form`\n  margin-top: 16px;\n`\n\nconst MessageTextArea = styled.textarea`\n    display: block;\n    width: 100%;\n`\n\nconst SubmitButton = styled.button`\n  margin-top:  8px;\n  display: block;\n`\n\nconst MessageList = styled.div`\n  margin-top:  16px;\n`\n\nconst MessageContainer = styled.div`\n    padding: 8px 16px;\n    border-radius: 7px;\n    border: 1px solid black;\n\n    & + & {\n        margin-top: 10px;\n    }\n`\n\nconst MessageHead = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding-bottom: 4px;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.3);\n`\n\nconst MessageAuthor = styled.div`\n    color: rgba(0, 0, 0, 0.7);\n    font-size: 14px;\n`\n\nconst MessageTime = styled.div``\nconst MessageBody = styled.div`\n    text-align: center;\n    width: 100%;\n    font-size: 16px;\n    margin-top: 16px;\n    white-space: pre-line;\n    word-break: break-word;\n`\n\nconst ErrorMessage = styled.div`\n  meargin-top: 16px;\n  color: red;\n`\nconst Loading = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  font-size: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nfunction Message({author, time, children}) {\n\n    return(\n        <MessageContainer>\n            <MessageHead>\n                <MessageAuthor> {author} </MessageAuthor>\n                <MessageTime>{time}</MessageTime>\n            </MessageHead>\n            <MessageBody>{children}</MessageBody>\n        </MessageContainer>\n    )\n}\n\nMessage.propTypes = {\n    author: PropTypes.string,\n    time: PropTypes.string,\n    children: PropTypes.node,\n}\n\nfunction MessageBoard() {\n  const [message, setMessage] = useState(null)\n  const [MessageApiError, setMessageApiError] = useState(null)\n  const [value, setValue] = useState();\n  const [postMessageError, setPostMessageError] = useState()\n  const [isLoadingPostMessage, setIsLoadingPostMessage] = useState(false);\n  \n  const fetchMessage = () => {\n\n    fetch(API_ENDPOINT)\n        .then(res => res.json())\n        .then(data => {\n          \n          setMessage(data)\n          setMessageApiError(null)\n        })\n        .catch( err => {\n            setMessageApiError(err.message)\n            console.log('err')\n        })\n    }\n\n  const handleTextareaChange = e => {\n    setValue(e.target.value)\n  }\n \n  const handleTextareaFocus = e => {\n      setPostMessageError(null)\n  }\n\n  const handleFormSubmit = e => {\n        e.preventDefault();\n        if(isLoadingPostMessage) {\n            return\n        }\n        setIsLoadingPostMessage(true)\n        fetch('https://student-json-api.lidemy.me/comments', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n            nickname: 'rock',\n            body: value\n        })\n        })\n        .then(res => res.json())\n        .then(data => {\n            setIsLoadingPostMessage(false)\n            if(data.ok === 0) {\n                setPostMessageError(data.message)\n                return\n            }\n            fetchMessage()\n            setValue(\"\")\n        }).catch(err => {\n            setIsLoadingPostMessage(false)\n            setPostMessageError(err.message)\n        })\n  }\n\n  useEffect(() => {\n      fetchMessage()\n  }, [])\n\n  return(\n    <Page>\n      {isLoadingPostMessage && <Loading> Loading...... </Loading>}\n      <Title>留言板</Title>\n      <MessageForm onSubmit={handleFormSubmit}>\n          <MessageTextArea value={value} onFocus={handleTextareaFocus} onChange={handleTextareaChange} rows={10}/>\n          <SubmitButton>送出留言</SubmitButton >\n          {postMessageError && (<ErrorMessage>{postMessageError}</ErrorMessage>)}\n      </MessageForm>\n      {MessageApiError && (\n          <ErrorMessage>\n              Something went wrong! {MessageApiError.toString()}\n          </ErrorMessage>\n      )}\n      {message && message.length === 0 && (<div> NoMessage </div>)}\n      <MessageList>\n          {message && message.map((message) => (\n              <Message \n                key={message.id} \n                author={message.nickname} \n                time={new Date(message.createdAt).toLocaleString()}>\n                {message.body}\n              </Message>\n          ))}\n      </MessageList>\n    </Page>\n  )\n}\n\n\nexport default MessageBoard;",{"ruleId":"16","severity":1,"message":"17","line":1,"column":8,"nodeType":"18","messageId":"19","endLine":1,"endColumn":13},{"ruleId":"16","severity":1,"message":"20","line":4,"column":17,"nodeType":"18","messageId":"19","endLine":4,"endColumn":23},{"ruleId":"16","severity":1,"message":"21","line":5,"column":3,"nodeType":"18","messageId":"19","endLine":5,"endColumn":9},{"ruleId":"16","severity":1,"message":"22","line":6,"column":3,"nodeType":"18","messageId":"19","endLine":6,"endColumn":8},{"ruleId":"16","severity":1,"message":"23","line":7,"column":3,"nodeType":"18","messageId":"19","endLine":7,"endColumn":7},"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used."]